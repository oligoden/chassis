// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lateral

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncQueueClient is the client API for SyncQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncQueueClient interface {
	Queue(ctx context.Context, in *QueueMessage, opts ...grpc.CallOption) (*QueueMessage, error)
}

type syncQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncQueueClient(cc grpc.ClientConnInterface) SyncQueueClient {
	return &syncQueueClient{cc}
}

func (c *syncQueueClient) Queue(ctx context.Context, in *QueueMessage, opts ...grpc.CallOption) (*QueueMessage, error) {
	out := new(QueueMessage)
	err := c.cc.Invoke(ctx, "/lateral.SyncQueue/Queue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncQueueServer is the server API for SyncQueue service.
// All implementations must embed UnimplementedSyncQueueServer
// for forward compatibility
type SyncQueueServer interface {
	Queue(context.Context, *QueueMessage) (*QueueMessage, error)
	mustEmbedUnimplementedSyncQueueServer()
}

// UnimplementedSyncQueueServer must be embedded to have forward compatible implementations.
type UnimplementedSyncQueueServer struct {
}

func (UnimplementedSyncQueueServer) Queue(context.Context, *QueueMessage) (*QueueMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (UnimplementedSyncQueueServer) mustEmbedUnimplementedSyncQueueServer() {}

// UnsafeSyncQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncQueueServer will
// result in compilation errors.
type UnsafeSyncQueueServer interface {
	mustEmbedUnimplementedSyncQueueServer()
}

func RegisterSyncQueueServer(s grpc.ServiceRegistrar, srv SyncQueueServer) {
	s.RegisterService(&SyncQueue_ServiceDesc, srv)
}

func _SyncQueue_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncQueueServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lateral.SyncQueue/Queue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncQueueServer).Queue(ctx, req.(*QueueMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncQueue_ServiceDesc is the grpc.ServiceDesc for SyncQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lateral.SyncQueue",
	HandlerType: (*SyncQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Queue",
			Handler:    _SyncQueue_Queue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
